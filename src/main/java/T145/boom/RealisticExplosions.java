package T145.boom;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import T145.boom.config.ModConfig;
import T145.boom.entities.EntityShrapnel;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.init.SoundEvents;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.Explosion;
import net.minecraft.world.World;
import net.minecraftforge.common.IPlantable;
import net.minecraftforge.event.world.ExplosionEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.Mod.Metadata;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

@Mod(modid = RealisticExplosions.MODID, name = RealisticExplosions.NAME, version = RealisticExplosions.VERSION, updateJSON = RealisticExplosions.UPDATE_JSON)
@Mod.EventBusSubscriber(modid = RealisticExplosions.MODID)
public class RealisticExplosions {

	public static final String MODID = "realisticexplosions";
	public static final String NAME = "RealisticExplosions";
	public static final String VERSION = "@VERSION@";
	public static final String UPDATE_JSON = "https://raw.githubusercontent.com/T145/realistic-explosions/master/update.json";
	public static final Logger LOG = LogManager.getLogger(MODID);

	@Instance(MODID)
	public static RealisticExplosions instance;

	@Metadata
	private ModMetadata meta;

	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		meta.authorList.add("T145");
		meta.autogenerated = false;
		meta.credits = "The fans!";
		meta.description = "Here comes the BETTER BOOM!";
		meta.logoFile = "logo.png";
		meta.modId = MODID;
		meta.name = NAME;
		meta.url = "https://github.com/T145/realistic-explosions";
		meta.useDependencyInformation = false;
		meta.version = VERSION;
	}

	@SubscribeEvent
	public static void onExplosionStart(ExplosionEvent.Start event) {
		event.setCanceled(true);
		event.getExplosion().doExplosionA();
	}

	@SubscribeEvent
	public static void onExplosionDetonate(ExplosionEvent.Detonate event) {
		World world = event.getWorld();
		Explosion explosion = event.getExplosion();

		world.playSound(null, explosion.x, explosion.y, explosion.z, SoundEvents.ENTITY_GENERIC_EXPLODE, SoundCategory.BLOCKS, 4.0F, (1.0F + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.2F) * 0.7F);

		if (ModConfig.general.spawnParticles) {
			if (explosion.size >= 2.0F && explosion.damagesTerrain) {
				world.spawnParticle(EnumParticleTypes.EXPLOSION_HUGE, explosion.x, explosion.y, explosion.z, 1.0D, 0.0D, 0.0D);
			} else {
				world.spawnParticle(EnumParticleTypes.EXPLOSION_LARGE, explosion.x, explosion.y, explosion.z, 1.0D, 0.0D, 0.0D);
			}
		}

		if (explosion.damagesTerrain) {
			for (BlockPos pos : explosion.affectedBlockPositions) {
				IBlockState state = world.getBlockState(pos);
				Block block = state.getBlock();

				if (ModConfig.general.spawnParticles) {
					double d0 = pos.getX() + world.rand.nextFloat();
					double d1 = pos.getY() + world.rand.nextFloat();
					double d2 = pos.getZ() + world.rand.nextFloat();
					double d3 = d0 - explosion.x;
					double d4 = d1 - explosion.y;
					double d5 = d2 - explosion.z;
					double d6 = MathHelper.sqrt(d3 * d3 + d4 * d4 + d5 * d5);
					d3 = d3 / d6;
					d4 = d4 / d6;
					d5 = d5 / d6;
					double d7 = 0.5D / (d6 / explosion.size + 0.1D);
					d7 = d7 * (world.rand.nextFloat() * world.rand.nextFloat() + 0.3F);
					d3 = d3 * d7;
					d4 = d4 * d7;
					d5 = d5 * d7;
					world.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, (d0 + explosion.x) / 2.0D, (d1 + explosion.y) / 2.0D, (d2 + explosion.z) / 2.0D, d3, d4, d5);
					world.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5);
				}

				if (state.getMaterial() != Material.AIR) {
					if (!(state.getBlock() instanceof IPlantable) && state.getMaterial() != Material.LEAVES && block.canDropFromExplosion(explosion)) {
						// TODO: Handle tile entities and such
						EntityShrapnel e = new EntityShrapnel(world, explosion, getProperState(state));
						e.fallTime = 14;

						boolean b = world.rand.nextBoolean();
						float motionX = world.rand.nextFloat() * (b ? 1 : -1);
						float motionY = world.rand.nextFloat();
						b = world.rand.nextBoolean();
						float motionZ = world.rand.nextFloat() * (b ? 1 : -1);

						e.motionX = motionX;
						e.motionY = motionY;
						e.motionZ = motionZ;

						world.spawnEntity(e);
					}

					block.onBlockExploded(world, pos, explosion);
				}
			}
		}

		if (explosion.causesFire) {
			for (BlockPos pos : explosion.affectedBlockPositions) {
				if (world.getBlockState(pos).getMaterial() == Material.AIR && world.getBlockState(pos.down()).isFullBlock() && explosion.random.nextInt(3) == 0) {
					world.setBlockState(pos, Blocks.FIRE.getDefaultState());
				}
			}
		}
	}

	private static IBlockState getProperState(IBlockState state) {
		if (state.getBlock() == Blocks.GRASS || state.getBlock() == Blocks.GRASS_PATH) {
			return Blocks.DIRT.getDefaultState();
		}
		return state;
	}
}